{"version":3,"sources":["app.js","mainController.js","utils/AnimateRotate.js","utils/links.js","utils/treeview.js","utils/Utils.js","services/ordersService.js"],"names":[],"mappingstmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/**\r\n * Created by User on 05/10/2015.\r\n */\r\nvar app = angular.module('app', [\"angucomplete-alt\"], function($interpolateProvider) {\r\n    $interpolateProvider.startSymbol('{%');\r\n    $interpolateProvider.endSymbol('%}');\r\n});\r\n\r\n//app.config(['$routeProvider',\r\n    //function($routeProvider) {\r\n    //    $routeProvider.\r\n    //        when('/phones', {\r\n    //            templateUrl: 'partials/phone-list.html',\r\n    //            controller: 'PhoneListCtrl'\r\n    //        }).\r\n    //        when('/phones/:phoneId', {\r\n    //            templateUrl: 'partials/phone-detail.html',\r\n    //            controller: 'PhoneDetailCtrl'\r\n    //        }).\r\n    //        otherwise({\r\n    //            redirectTo: '/phones'\r\n    //        });\r\n    //}]);\r\n\r\napp.directive('orderTable', function() {\r\n    return {\r\n        templateUrl: '/partials/Orders'\r\n    }\r\n});\r\n","/**\r\n * Created by User on 01/10/2015.\r\n */\r\napp.controller('controller', ['$scope', '$http', '$interval', '$sce', function($scope, $http, $interval, $sce) {\r\n    $scope.customersSelect = customers;\r\n    $scope.customers = toMap(customers);\r\n    $scope.customer = customers[Object.keys(customers)[0]];\r\n\r\n    $scope.units = units;\r\n    $scope.unitsMap = toMap(units);\r\n    $scope.products = toMap(products);\r\n\r\n    $scope.openOrders = toMap(openOrders);\r\n    $scope.doneNonPaidOrders = toMap(doneNonPaidOrders);\r\n    $scope.paidOrders = toMap(paidOrders);\r\n\r\n    $scope.orders = $scope.openOrders;\r\n    $scope.newOrder = {};\r\n    $scope.changeOrderInstance = {};\r\n    var freezed_string = \"קפוא\";\r\n\r\n    $scope.toArray = function (map) {\r\n        var array_values = [];\r\n\r\n        for (var key in map) {\r\n            array_values.push(map[key]);\r\n        }\r\n        return array_values;\r\n    };\r\n\r\n    $scope.getProductNameById = function (id){\r\n        return $scope.products[id].name;\r\n    };\r\n    $scope.getAmountString = function(orderItem){\r\n        if(orderItem.amount_product_units){\r\n            return orderItem.amount_product_units + ' ' + $scope.unitsMap[1].name;\r\n        }\r\n        else if(orderItem.amount_kilo){\r\n            return orderItem.amount_kilo + ' ' + $scope.unitsMap[2].name;\r\n        }\r\n        else{\r\n            return orderItem.amount_packages + ' ' + $scope.unitsMap[3].name;\r\n        }\r\n    };\r\n\r\n    function getUnitName(orderItem){\r\n        if(orderItem.amount_product_units){\r\n            return $scope.unitsMap[1].name;\r\n        }\r\n        else if(orderItem.amount_kilo){\r\n            return $scope.unitsMap[2].name;\r\n        }\r\n        else{\r\n            return $scope.unitsMap[3].name;\r\n        }\r\n    }\r\n\r\n    $scope.getCustomerPriceString = function (product_id, customer_id) {\r\n        return $scope.getProductNameById(product_id) + ' ' + $scope.getCustomerPrice(product_id, customer_id) + '₪';\r\n\r\n    };\r\n\r\n    $scope.getCustomerPrice = function (product_id, customer_id) {\r\n        var price;\r\n        $.each($scope.customers[customer_id].customPrices, function (index, customPrice) {\r\n            if(customPrice.product_id == product_id){\r\n                price = customPrice.special_price;\r\n            }\r\n        });\r\n        if(!price){\r\n            $.each($scope.products, function (index, product) {\r\n                if(product.id == product_id){\r\n                    price = product.price;\r\n                }\r\n            });\r\n        }\r\n        return price;\r\n    };\r\n\r\n    $scope.updateAmountByUnits = function(orderItem){\r\n        if(orderItem.units == 1){\r\n            orderItem.amount_product_units = orderItem.amount;\r\n        }\r\n        else if(orderItem.units == 2){\r\n            orderItem.amount_kilo = orderItem.amount;\r\n        }\r\n        else{\r\n            orderItem.amount_packages = orderItem.amount;\r\n        }\r\n    };\r\n\r\n    $scope.deleteOrder = function(id){\r\n        $http.delete('/Customers/Orders/' + id, {_token: getToken()}).\r\n            then(function(response){\r\n                delete $scope.orders[id];\r\n            });\r\n    };\r\n\r\n    $scope.doneOrder = function (id) {\r\n        if($scope.ordersState == OPEN_ORDERS_STATE) {\r\n            $http.post('/Customers/Orders/done', {id: id}).\r\n                then(function (response) {\r\n                        $scope.doneNonPaidOrders[id] = $scope.orders[id];\r\n                        delete $scope.orders[id];\r\n                });\r\n        } else{\r\n            $http.post('/Customers/Orders/done/undo', {id: id}).\r\n                then(function (response) {\r\n                    $scope.openOrders[id] = $scope.orders[id];\r\n                    delete $scope.orders[id];\r\n                });\r\n        }\r\n\r\n    };\r\n\r\n    $scope.paidOrder = function (id) {\r\n        if($scope.ordersState == PAID_ORDERS_STATE){\r\n            $http.post('/Customers/Orders/paid/undo', {id: id}).\r\n                then(function (response) {\r\n                    $scope.doneNonPaidOrders[id] = $scope.orders[id];\r\n                    delete $scope.orders[id];\r\n                });\r\n        }\r\n        else {\r\n            $http.post('/Customers/Orders/paid', {id: id}).\r\n                then(function (response) {\r\n                    $scope.paidOrders[id] = $scope.orders[id];\r\n                    delete $scope.orders[id];\r\n                });\r\n        }\r\n    };\r\n\r\n    $scope.isDoneDisabled = function (order_id) {\r\n        var disabled = true;\r\n\r\n            var order = $scope.orders[order_id];\r\n            if(order.orderItems && order.orderItems.length > 0){\r\n\r\n                //all items done\r\n                disabled = false;\r\n\r\n                $.each(order.orderItems, function (index, orderItem) {\r\n                    if(orderItem.done == null || orderItem.done == false){\r\n                        disabled = true;\r\n                        return false;\r\n                    } else{\r\n                        changeStyle(orderItem.id, '#2ADC2A');\r\n                    }\r\n                });\r\n            }\r\n        //no items\r\n        return disabled;\r\n    };\r\n\r\n    $scope.checkDoneable = function (order_id) {\r\n        return $scope.isDoneDisabled(order_id);\r\n    };\r\n    $scope.checkPaidable = function (order_id) {\r\n        return $scope.isDoneDisabled(order_id);\r\n    };\r\n\r\n\r\n        $scope.findProductByName = function(name){\r\n        for (var key in $scope.products) {\r\n            if($scope.products[key].name == name){\r\n                return $scope.products[key].id;\r\n            }\r\n        }\r\n    };\r\n\r\n    $scope.saveOrderItem = function(orderItem){\r\n        $http.post('/Customers/Orders/'+ orderItem.order_id +'/OrderItems/add', orderItem).\r\n            then(function(response){\r\n                orderItem.id = response.data[0].id;\r\n            });\r\n    };\r\n\r\n    $scope.deleteOrderItem = function(orderItemId){\r\n        $http.delete('/Customers/Orders/OrderItems/' + orderItemId, {_token: getToken()});\r\n    };\r\n\r\n    $scope.newOrderItems = [];\r\n    $.each($scope.orders, function (key, order) {\r\n        $scope.newOrderItems[order.id] = {'units': 2};\r\n    });\r\n\r\n    $scope.addRow = function(newOrderItem){\r\n        newOrderItem.product_id = $scope.findProductByName(newOrderItem.product_name);\r\n        var alreadyExists = false;\r\n        $.each($scope.orders[newOrderItem.order_id].orderItems, function (idx, orderItem) {\r\n           if(orderItem.product_id == newOrderItem.product_id){\r\n               alreadyExists = true;\r\n           }\r\n        });\r\n        if(alreadyExists) {\r\n            alert('מוצר כבר קיים בהזמנה');\r\n            return;\r\n        }\r\n\r\n        newOrderItem.units = parseInt(newOrderItem.units);\r\n\r\n        if(newOrderItem.amount == 0) {\r\n            newOrderItem.amount = 1; // x = 1\r\n            newOrderItem.units  = 1; // x item\r\n        }\r\n        $scope.updateAmountByUnits(newOrderItem);\r\n\r\n        var order_id = newOrderItem.order_id;\r\n        if($scope.orders[order_id].id == newOrderItem.order_id){\r\n            var clone = jQuery.extend(true, {}, newOrderItem);\r\n            $scope.saveOrderItem(clone);\r\n            if(!$scope.orders[order_id].orderItems){\r\n                $scope.orders[order_id].orderItems = {};\r\n            }\r\n            $scope.orders[order_id].orderItems.push(clone);\r\n            $scope.newOrderItems[order_id] = {order_id: order_id, units: \"1\"};\r\n        }\r\n    };\r\n\r\n\r\n    $scope.totalPrice = function (order_id, customer_id) {\r\n        var total = 0;\r\n        $.each($scope.orders[order_id].orderItems, function (index, orderItem) {\r\n            if(orderItem.done && orderItem.weight){\r\n                total += orderItem.weight * $scope.getCustomerPrice(orderItem.product_id, customer_id);\r\n            }\r\n        });\r\n\r\n        return 'סכ\"ה: ' + total + '₪';\r\n    };\r\n\r\n    $scope.displayTotalCalculation = function (order_id, customer_id) {\r\n        var total = 0;\r\n        var sub_total;\r\n        var display = \"\";\r\n\r\n        $.each($scope.orders[order_id].orderItems, function (index, orderItem) {\r\n            if(orderItem.done && orderItem.weight){\r\n                sub_total = orderItem.weight * $scope.getCustomerPrice(orderItem.product_id, customer_id);\r\n                //display += orderItem.weight + \"\\n X \" + $scope.getCustomerPrice(orderItem.product_id, customer_id) +\r\n                //    ' ' + $scope.getProductNameById(orderItem.product_id) + '\\n= ' + sub_total + '\\n';\r\n                display += orderItem.weight + \"\\n X \"\r\n                        + $scope.getCustomerPrice(orderItem.product_id, customer_id)\r\n                        + \" (\" + $scope.getProductNameById(orderItem.product_id) + \")\" + '\\n= ' + sub_total + '\\n';\r\n                total += sub_total;\r\n            }\r\n        });\r\n\r\n        display += 'סך הכל: ' + total + '₪';\r\n        alert(display);\r\n    };\r\n\r\n    $scope.removeOrderItem = function (orderItem, orderId) {\r\n        var orderItemId = orderItem.id;\r\n        for (var j = 0, len2 = $scope.orders[orderId].orderItems.length; j < len2; j++) {\r\n            if ($scope.orders[orderId].orderItems[j].id == orderItemId) {\r\n                $scope.orders[orderId].orderItems.splice(j, 1);\r\n                $scope.deleteOrderItem(orderItemId);\r\n                if(!$scope.orders[orderId].deletedItems) $scope.orders[orderId].deletedItems = {};\r\n                $scope.orders[orderId].deletedItems[orderItemId] = orderItem;\r\n                return;\r\n            }\r\n        }\r\n    };\r\n\r\n    $scope.changeOrder = function (order) {\r\n        var radio_selected = $('#changeOrderModal' + order.id).find('input:radio:checked');\r\n        if(radio_selected.val() == 'date'){\r\n            $http.post('/Customers/Orders/changeDate', {order_id: order.id,\r\n                order_finish_date: $scope.getDateMoment24h($scope.changeOrderInstance.order_finish_date, $scope.changeOrderInstance.am_pm).format(),\r\n                '_token': getToken()}).\r\n                then(function (response) {\r\n                    order.order_finish_date = formatDate($scope.getDateMoment24h($scope.changeOrderInstance.order_finish_date, $scope.changeOrderInstance.am_pm).toDate());\r\n                });\r\n        } else if(radio_selected.val() == 'items'){\r\n            $('#changeOrderModal' + order.id).find('input:checkbox:checked').each(function (index, element) {\r\n                var item_id = $(element).attr('item-id');\r\n                $http.post('/Customers/Orders/recoverItem', { item_id: item_id,\r\n                    '_token': getToken()}).\r\n                    then(function (response) {\r\n                        console.log(item_id);\r\n                        order.orderItems.push(order.deletedItems[item_id]);\r\n                        delete order.deletedItems[item_id];\r\n                    });\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.computeRemainingTime = function (finish_date) {\r\n        var date = parseDate(finish_date);\r\n        var curr = new Date();\r\n\r\n        var past = false;\r\n        if (date < curr) {\r\n            tmp = curr;\r\n            curr = date;\r\n            date = tmp;\r\n\r\n            past = true;\r\n        }\r\n\r\n        var msec = date - curr;\r\n        var dd = Math.floor(msec / 1000 / 60 / 60 / 24);\r\n        msec -= dd * 1000 * 60 * 60 * 24;\r\n        var hh = Math.floor(msec / 1000 / 60 / 60);\r\n        msec -= hh * 1000 * 60 * 60;\r\n        var mm = Math.floor(msec / 1000 / 60);\r\n\r\n        if (dd != 0) {\r\n            dd = dd + \"<br> ימים, \";\r\n        }\r\n        else {\r\n            dd = \"\";\r\n        }\r\n        if (hh != 0) {\r\n            hh = '<br>' + hh + \" שעות <br>\";\r\n        }\r\n        else {\r\n            hh = \"\";\r\n        }\r\n\r\n        var label = '<label class=' + (past? \"timePast\" : \"timeFuture\") + '><br>';\r\n        label += past ? \"ללפני: \" : \"לעוד: \";\r\n        label += dd + hh + mm + \" דקות\" + \"<labe>\";\r\n\r\n        label = $sce.trustAsHtml(label);\r\n        return label;\r\n    };\r\n\r\n    $scope.getOrdererText = function(order, additionalText){\r\n        additionalText = additionalText || \"\";\r\n        var text = $scope.customers[order.orderer_id].first_name + ' ' + $scope.customers[order.orderer_id].last_name + ' ';\r\n\r\n        if($scope.ordersState == PAID_ORDERS_STATE){\r\n            var order_finish_date = moment(order.order_finish_date);\r\n            var today = moment();\r\n            if(order_finish_date.diff(today, 'days') == 0){\r\n                text += 'היום בשעה ';\r\n                text += moment(order.order_finish_date).format('HH:mm');\r\n            } else if(order_finish_date.diff(today, 'days') == 1){\r\n                text += 'מחר בשעה ';\r\n                text += moment(order.order_finish_date).format('HH:mm');\r\n            } else{\r\n                text += moment(order.order_finish_date).format('l HH:mm');\r\n            }\r\n\r\n        } else{\r\n            text += $scope.computeRemainingTime(order.order_finish_date);\r\n        }\r\n        text = text.split('<br>').join(' ');\r\n        text = $sce.trustAsHtml(additionalText + text);\r\n        return text;\r\n    };\r\n\r\n    $scope.createNewOrder = function (customer_id) {\r\n        //$http.defaults.headers.post['X-CSRF-TOKEN'] = getToken();\r\n        $http.post('/Customers/Orders/store', {orderer_id: customer_id,\r\n            order_finish_date: $scope.getDateMoment24h($scope.newOrder.order_finish_date, $scope.newOrder.am_pm).format(),\r\n            '_token': getToken()}).\r\n            then(function (response) {\r\n                var id = response.data;\r\n                $scope.openOrders[id] = ({id: id,\r\n                    orderer_id: customer_id,\r\n                    order_finish_date: formatDate($scope.getDateMoment24h($scope.newOrder.order_finish_date, $scope.newOrder.am_pm).toDate()),\r\n                    orderItems: []});\r\n            },\r\n            function (response) {\r\n                $('body').html(response.data);\r\n            });\r\n    };\r\n\r\n    $scope.getDateMoment24h = function(date, am_pm){\r\n        if(am_pm == 'pm'){\r\n            return moment(date).add('12', 'hours');\r\n        }\r\n        return moment(date);\r\n    };\r\n\r\n    $scope.updateItem = function (orderItem) {\r\n        $http.post('/Customers/Orders/OrderItem/UpdateWeight', {id: orderItem.id, weight: orderItem.weight,\r\n            details: orderItem.additional_details})\r\n            .then(function (response) {\r\n                if(orderItem.weight){\r\n                    orderItem.done = true;\r\n                    changeStyle(orderItem.id, '#2ADC2A');\r\n                }\r\n                else{\r\n                    orderItem.done = false;\r\n                    changeStyle(orderItem.id, '#FF3E3E');\r\n                }\r\n            });\r\n    };\r\n\r\n    $scope.markDone = function (orderItem) {\r\n        if(orderItem.weight){\r\n            orderItem.done = true;\r\n        }\r\n    };\r\n\r\n\r\n    changeStyle = function (id, color) {\r\n        $.each($('[id=\"rowid-'+id+'\"]').find('td'), function (index, element) {\r\n            $(element).attr('style', 'background-color:' + color + ' !important');\r\n        });\r\n    };\r\n\r\n    $scope.promptAddDetails = function(orderItem){\r\n        orderItem.additional_details = prompt('הכנס פרטים נוספים', orderItem.additional_details);\r\n    };\r\n\r\n    $scope.inputChangeHandler = function(str) {\r\n        if (str.length < minlength) {\r\n            clearResults();\r\n        }\r\n        else if (str.length === 0 && minlength === 0) {\r\n            $scope.searching = false;\r\n            showAll();\r\n        }\r\n\r\n        if ($scope.inputChanged) {\r\n            str = $scope.inputChanged(str);\r\n        }\r\n        return str;\r\n    };\r\n\r\n    $scope.changeOrderDate = function(order_id){\r\n        changeDateFieldsVisibality(order_i);\r\n    };\r\n\r\n    function changeDateFieldsVisibality(order_id){\r\n        //show, show, change class: primary\r\n    }\r\n\r\n    $scope.changeOrders = function(state){\r\n        $('#orders-state-button-group').children('button')\r\n            .removeClass('open-orders-button non-paid-orders-button done-orders-button active');\r\n        var btn = $('#order-state-btn-' + state);\r\n        switch (state){\r\n            case 1:\r\n                btn.addClass('open-orders-button active');\r\n                //$http.get('/allOpenOrders').then(changeOrdersByResponse);\r\n                $scope.ordersState = OPEN_ORDERS_STATE;\r\n                $scope.orders = $scope.openOrders;\r\n                break;\r\n            case 2:\r\n                btn.addClass('non-paid-orders-button active');\r\n                //$http.get('/allDoneNonPaidOrders').then(changeOrdersByResponse);\r\n                $scope.ordersState = DONE_ORDERS_STATE;\r\n                $scope.orders = $scope.doneNonPaidOrders;\r\n                break;\r\n            case 3:\r\n                btn.addClass('done-orders-button active');\r\n                //$http.get('/allPaidOrders').then(changeOrdersByResponse);\r\n                $scope.ordersState = PAID_ORDERS_STATE;\r\n                $scope.orders = $scope.paidOrders;\r\n                break;\r\n        }\r\n    };\r\n    OPEN_ORDERS_STATE = 1;\r\n    DONE_ORDERS_STATE = 2;\r\n    PAID_ORDERS_STATE = 3;\r\n    $scope.ordersState = OPEN_ORDERS_STATE;\r\n\r\n    $scope.changeOrderButtonsStateText = function () {\r\n        if($scope.ordersState == PAID_ORDERS_STATE){\r\n            $('.btn-order-paid').each(function(index, element){\r\n                $(element).addClass('btn-danger');\r\n                $(element).text('לא שולם');\r\n            });\r\n        }\r\n        //changeDoneButtonsText\r\n        if($scope.ordersState == PAID_ORDERS_STATE || $scope.ordersState == DONE_ORDERS_STATE){\r\n            $('.btn-order-done').each(function(index, element){\r\n                $(element).addClass('btn-danger');\r\n                $(element).text('לא הסתיים');\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.isOrdersStateOpen = function () {\r\n        return $scope.ordersState == OPEN_ORDERS_STATE;\r\n    };\r\n\r\n    function changeOrdersByResponse(response) {\r\n        $scope.response = response.data;\r\n        $scope.orders = toMap(response.data);\r\n    }\r\n\r\n    $scope.populateDeletedItems = function (order) {\r\n        $http.get('Customers/Orders/' + order.id + '/deletedItems')\r\n            .then(function (response) {\r\n                order.deletedItems = toMap(response.data);\r\n            });\r\n    };\r\n\r\n    $scope.getIsFreezedText  = function (orderItem) {\r\n        return orderItem.is_freeze_allowed ? \" קפוא\" : \"\";\r\n    };\r\n\r\n    $scope.getOrderItemFinishDateMS = function (orderItem) {\r\n        return $scope.orders[orderItem.order_id].order_finish_date;\r\n    };\r\n\r\n    $scope.getUndoneProducts = function(){\r\n        var undoneProducts = {};\r\n\r\n        var undoneOrderItems = [];\r\n        $.each($scope.openOrders, function(idx, order){\r\n            $.each(order.orderItems, function (idx, orderItem) {\r\n                if(orderItem.weight == 0 || !orderItem.weight){\r\n                    undoneOrderItems.push(orderItem);\r\n                }\r\n            })\r\n        });\r\n\r\n        $.each(undoneOrderItems, function(idx, orderItem){\r\n            if(!undoneProducts[orderItem.product_id]){\r\n                undoneProducts[orderItem.product_id] =\r\n                    {product_id: orderItem.product_id, amounts: {}, amoutFreezed: 0, orderItems: [],\r\n                     closestFinishTime: $scope.orders[orderItem.order_id].order_finish_date};\r\n            }\r\n\r\n            var key;\r\n            var amount, is_freezed = false;\r\n            if(orderItem.amount_product_units){\r\n                key = $scope.unitsMap[1].name;\r\n                amount = orderItem.amount_product_units;\r\n            }\r\n            else if(orderItem.amount_kilo){\r\n                key = $scope.unitsMap[2].name;\r\n                amount = orderItem.amount_kilo;\r\n            }\r\n            else{\r\n                key = $scope.unitsMap[3].name;\r\n                amount = orderItem.amount_packages;\r\n            }\r\n\r\n            if(orderItem.is_freeze_allowed){\r\n                key += \" \" + freezed_string;\r\n                is_freezed = true;\r\n            }\r\n\r\n            if(!undoneProducts[orderItem.product_id].amounts[key]){\r\n                undoneProducts[orderItem.product_id].amounts[key] = {amount: amount, freezed: is_freezed};\r\n            } else{\r\n                undoneProducts[orderItem.product_id].amounts[key].amount += amount;\r\n            }\r\n\r\n            undoneProducts[orderItem.product_id].orderItems.push(orderItem);\r\n\r\n            if(moment($scope.orders[orderItem.order_id].order_finish_date).isAfter(moment(undoneProducts[orderItem.product_id].closestFinishTime))){\r\n                $scope.orders[orderItem.order_id].order_finish_date = undoneProducts[orderItem.product_id].closestFinishTime;\r\n            }\r\n        });\r\n\r\n        return undoneProducts;\r\n    };\r\n\r\n    $scope.undoneProducts = $scope.getUndoneProducts();\r\n\r\n    //$scope.newOrder.order_finish_date = new Date(new Date().toISOString().substring(0, 10));\r\n    $.each($scope.orders, function (index, order) {\r\n        $.each(order.orderItems, function (index, orderItem) {\r\n            $scope.markDone(orderItem);\r\n        });\r\n    });\r\n\r\n    $scope.getCustomerFullName = function (orderItem) {\r\n        return $scope.customers[$scope.openOrders[orderItem.order_id].orderer_id].first_name\r\n            + \" \" + $scope.customers[$scope.openOrders[orderItem.order_id].orderer_id].last_name;\r\n    };\r\n\r\n    $scope.getRowId = function (id){\r\n        return 'rowid-' + id;\r\n    };\r\n\r\n    $interval(function () {\r\n    }, 20000)\r\n}]);\r\n\r\napp.filter('freezedFilter', function(){\r\n\r\n    return function(undoneProducts, query){\r\n        var result = {};\r\n        for (var i in undoneProducts){\r\n            result[i] = undoneProducts[i];\r\n        }\r\n\r\n        Object.keys(result).forEach(function (key) {\r\n            if(result[key].freezed != query){\r\n                delete result[key];\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n});\r\n\r\nfunction formatDate(date){\r\n    return date.getFullYear() + '-' + (date.getMonth()+1) + '-' + date.getDate() + ' ' +\r\n        date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\r\n}\r\n\r\nfunction parseDate(input) {\r\n    var parts = input.split('-');\r\n    var parts2 = parts[2].split(' ');\r\n    var parts3 = parts2[1].split(':');\r\n\r\n    // new Date(year, month [, day [, hours[, minutes[, seconds[, ms]]]]])\r\n    return new Date(parts[0], parts[1]-1, parts2[0], parts3[0], parts3[1]); // Note: months are 0-based\r\n}\r\n\r\nfunction getToken(){\r\n    return $('#token-input').attr('content');\r\n}\r\n","function AnimateRotate(elem_id) {\r\n    // caching the object for performance reasons\r\n    var $elem = $('#' + elem_id);\r\n\r\n    // we use a pseudo object for the animation\r\n    // (starts from `0` to `angle`), you can name it as you want\r\n    $({deg: 0}).animate({deg: 360}, {\r\n        duration: 1200,\r\n        step: function(now) {\r\n            // in the step-callback (that is fired each step of the animation),\r\n            // you can use the `now` paramter which contains the current\r\n            // animation-position (`0` up to `angle`)\r\n            $elem.css({\r\n                transform: 'rotate(' + now + 'deg)'\r\n            });\r\n        }\r\n    });\r\n}\r\n","// Colour the current URL\r\n$(document).ready(function() {\r\n    $(\"[href]\").each(function() {\r\n        if (this.href == window.location.href) {\r\n            $(this).css(\r\n                {\"background-color\":\"rgb(94, 119, 132)\",\r\n                    \"color\":\"white\"});\r\n        }\r\n    });\r\n});\r\n\r\n// If its the current url - cancel surfing\r\nvar link = document.URL;\r\n\r\n$('.menuOption').click(function(e){\r\n    clickedUrl = this.childNodes[1].href;\r\n\r\n    if(link == clickedUrl){\r\n        e.preventDefault();\r\n        $(this).children().css({\"cursor\":\"no-drop\"});\r\n    }\r\n});","/**\r\n * Created by User on 09/10/2015.\r\n */\r\n$.fn.extend({\r\n    treed: function (o) {\r\n\r\n        var openedClass = 'glyphicon-minus-sign';\r\n        var closedClass = 'glyphicon-plus-sign';\r\n\r\n        if (typeof o != 'undefined'){\r\n            if (typeof o.openedClass != 'undefined'){\r\n                openedClass = o.openedClass;\r\n            }\r\n            if (typeof o.closedClass != 'undefined'){\r\n                closedClass = o.closedClass;\r\n            }\r\n        };\r\n\r\n        //initialize each of the top levels\r\n        var tree = $(this);\r\n        tree.addClass(\"tree\");\r\n        tree.find('li').has(\"ul\").each(function () {\r\n            var branch = $(this); //li with children ul\r\n            //branch.prepend(\"<i class='indicator glyphicon \" + closedClass + \"'></i>\");\r\n            branch.addClass('branch');\r\n            branch.on('click', function (e) {\r\n                if (this == e.target) {\r\n                    var icon = $(this).children('i:first');\r\n                    icon.toggleClass(openedClass + \" \" + closedClass);\r\n                    $(this).children('ul').children().toggle();\r\n                }\r\n            })\r\n        });\r\n        //fire event from the dynamically added icon\r\n        tree.find('.branch .indicator').each(function(){\r\n            $(this).on('click', function () {\r\n                $(this).closest('li').click();\r\n            });\r\n        });\r\n        //fire event to open branch if the li contains an anchor instead of text\r\n        tree.find('.branch>a').each(function () {\r\n            $(this).on('click', function (e) {\r\n                $(this).closest('li').click();\r\n                e.preventDefault();\r\n            });\r\n        });\r\n        //fire event to open branch if the li contains a button instead of text\r\n        tree.find('.branch>button').each(function () {\r\n            $(this).on('click', function (e) {\r\n                $(this).closest('li').click();\r\n                e.preventDefault();\r\n            });\r\n        });\r\n    }\r\n});\r\n\r\n","/**\r\n * Created by User on 21/10/2015.\r\n */\r\nfunction toMap(array){\r\n    return array.reduce(function(map, obj) {\r\n        map[obj.id] = obj;\r\n        return map;\r\n    }, {});\r\n}\r\n","/**\r\n * Created by User on 21/10/2015.\r\n */\r\napp.service('ordersService', [ function ($scope) {\r\n    this.getProductNameById = function (id){\r\n        return $scope.products[id].name;\r\n    };\r\n}]);"],"sourceRoot":"/source/"}